% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods_coexp_dgrdl.R
\name{dgrdl_grid_search}
\alias{dgrdl_grid_search}
\title{Grid search over DGRDL parameters}
\usage{
dgrdl_grid_search(
  object,
  neighbours_vec,
  dict_size_vec,
  seed_vec,
  dgrdl_params = params_dgrdl(),
  .verbose = TRUE
)
}
\arguments{
\item{object}{The class, see \code{\link[=bulk_coexp]{bulk_coexp()}}. Ideally, you
should run \code{\link[=preprocess_bulk_coexp]{preprocess_bulk_coexp()}} before applying this function.}

\item{neighbours_vec}{Integer vector. The different k nearest neighbours
to test.}

\item{dict_size_vec}{Integer vector. The different dictionary sizes to test
for.}

\item{seed_vec}{Integer vector. The different initial seeds to test for the
dictionary generation.}

\item{dgrdl_params}{List. Output of \code{\link[=params_dgrdl]{params_dgrdl()}}:
\itemize {
\item sparsity - Integer. Sparsity constraint (max non-zero coefficients
per signal)
\item dict size - Integer. Will be ignored by this function and the
\code{dict_size_vec} vector will be used.
\item alpha - Float. Sample context regularisation weight.
\item beta - Float. Feature effect regularisation weight.
\item max_iter - Integer. Maximum number of iterations for the main
algorithm.
\item k_neighbours - Integer. Will be ignored by this function and the
\code{neighbours_vec} will be used.
\item admm_iter - Integer. ADMM iterations for sparse coding.
\item rho - Float. ADMM step size.
}}

\item{.verbose}{Boolean. Controls verbosity of the function.}
}
\value{
\code{bulk_coexp} with the grid search results added to the class.
}
\description{
This function allows you to quickly iterate over different initial seeds,
number of neighbours for the KNN graph and dictionary sizes to identify
optimal hyperparameters for your DGRDL run.
}
\references{
Pan et al., Cell Syst, 2022
}
