% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_ica.R
\name{fast_ica_rust}
\alias{fast_ica_rust}
\title{Fast ICA via Rust}
\usage{
fast_ica_rust(
  X,
  n_icas,
  ica_fun = c("logcosh", "exp"),
  ica_params = params_ica_general(),
  fast_svd = TRUE,
  seed = NULL
)
}
\arguments{
\item{X}{Numeric matrix. The data on which you want to run fastICA.}

\item{n_icas}{Integer. Number of independent components to recover.}

\item{ica_fun}{String, element of \code{c("logcosh", "exp")}.}

\item{ica_params}{List. The ICA parameters, see
\code{\link[=params_ica_general]{params_ica_general()}} wrapper function. This function generates a
list containing:
\itemize{
\item maxit - Integer. Maximum number of iterations for ICA.
\item alpha - Float. The alpha parameter for the logcosh version of ICA.
Should be between 1 to 2.
\item max_tol - Maximum tolerance of the algorithm.
\item verbose - Controls verbosity of the function.
}}

\item{fast_svd}{Boolean. Shall the randomised SVD be used. This is faster,
but less precise.}

\item{seed}{Integer. Seed to ensure reproducible results.}
}
\value{
A list containing:
\itemize{
\item w The mixing matrix w.
\item A ICA results matrix A.
\item S ICA results matrix S.
\item converged Boolean indicating if algorithm converged.
}
}
\description{
This functions is a wrapper over the Rust implementation of fastICA and the
generation of the pre-processed data and pre-whitening matrix. It has
the same two options \code{c("logcosh", "exp")} to run ICA in parallel modus. You
can control the parameters of ICA via \code{ica_params}.
}
