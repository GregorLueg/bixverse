% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods_coexp_ica.R
\name{ica_stabilised_results}
\alias{ica_stabilised_results}
\title{Run stabilised ICA with a given number of components}
\usage{
ica_stabilised_results(
  object,
  no_comp,
  ica_type = c("logcosh", "exp"),
  iter_params = params_ica_randomisation(),
  ica_params = params_ica_general(),
  random_seed = 42L,
  consistent_sign = TRUE,
  .verbose = TRUE
)
}
\arguments{
\item{object}{The class, see \code{\link[=bulk_coexp]{bulk_coexp()}}. You need to apply
\code{\link[=ica_processing]{ica_processing()}} before running this function.}

\item{no_comp}{Integer. Number of components you wish to use for the ICA
run. \code{\link[=ica_evaluate_comp]{ica_evaluate_comp()}} can give you an idea in terms of
stability of the number of components at different levels.}

\item{ica_type}{String, element of \code{c("logcosh", "exp")}.}

\item{iter_params}{List. This list controls the randomisation parameters for
the ICA runs, see \code{\link[=params_ica_randomisation]{params_ica_randomisation()}} for estimating
stability. Has the following elements:
\itemize{
\item cross_validate - Boolean. Shall the data be split into different
chunks on which ICA is run. This will slow down the function substantially,
as every chunk needs to whitened again.
\item random_init - Integer. How many random initialisations shall be used
for the ICA runs.
\item folds - If \code{cross_validate} is set to \code{TRUE} how many chunks shall be
used. To note, you will run per ncomp random_init * fold ICA runs which
can quickly increase.
}}

\item{ica_params}{List. The ICA parameters, see \code{\link[=params_ica_general]{params_ica_general()}}
wrapper function. This function generates a list containing:
\itemize{
\item maxit - Integer. Maximum number of iterations for ICA.
\item alpha - Float. The alpha parameter for the logcosh version of ICA.
Should be between 1 to 2.
\item max_tol - Maximum tolerance of the algorithm.
\item verbose - Controls verbosity of the function.
}}

\item{random_seed}{Integer. For reproducibility.}

\item{consistent_sign}{Boolean. If set to \code{TRUE}, for each source the absolute
maximum value will be positive, i.e., the sign will be inverted so that the
absolute bigger tail is set to positive floats.}

\item{.verbose}{Boolean. Controls verbosity.}
}
\value{
\code{bulk_coexp} with the the source matrix S, mixing matrix A and other
parameters added to the slots.
}
\description{
This function runs stabilised ICA with the defined number of components.
}
