% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes_graphs.R
\name{snf}
\alias{snf}
\title{Similarity network fusion}
\usage{
snf(data = NULL, data_name = NULL, snf_params = params_snf())
}
\arguments{
\item{data}{Optional data to already transform into adjacency data. Any data
supplied will be assumed to be samples x features. The provided data taype
can be a data.table (for categorical and/or mixed types) or a matrix (for
continous types). If you provide a data.table, the function will assume the
first column are the sample identifiers. Please ensure that setting.}

\item{data_name}{Optional string. Name of the data modality.}

\item{snf_params}{List. The SNF parameters, see \code{\link[=params_snf]{params_snf()}}. The
list contains the following elements:
\itemize{
\item k - Integer. Number of neighbours to consider.
\item t - Integer. Number of iterations for the SNF algorithm.
\item mu - Float. Normalisation factor for the Gaussian kernel width.
\item alpha - Float. Normalisation parameter controlling the fusion
strength.
\item normalise - Boolean. Shall continuous values be Z-scored.
\item distance_metric - String. One of
\code{c("euclidean", "manhattan", "canberra", "cosine")}. Which distance metric
to use for the continuous calculations. In case of pure categorical,
Hamming will be used, for mixed data types Gower distance is used.
}
The parameters will be internally stored for subsequent usage in other
functions.}
}
\value{
Returns the \code{snf} class for further operations.
}
\description{
This class is designed to generate and store the adjacency matrices for
subsequent usage in similarity network fusion. There are methods to add
different types of adjacency matrices (pending the type of data, it can be
continuous, categorical and/or mixed). Subsequently, there are methods to
generate the final network.
}
\section{Properties}{

\describe{
\item{adj_matrices}{A list containing the processed adjacency matrices.}
\item{snf_adj}{Matrix. The final adjacency of the fused network.}
\item{params}{A (nested) list that will store all the parameters of the
applied function.}
\item{final_results}{data.table. Contains final results.}
}
}

